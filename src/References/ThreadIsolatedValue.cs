using System;
using System.Collections.Generic;
using System.Threading;

namespace VDS.Common.References;

/// <summary>
/// Provides a thread isolated reference to some value type
/// </summary>
/// <typeparam name="T">Reference Type</typeparam>
public class ThreadIsolatedValue<T>
    : IDisposable
    where T : struct
{
    private readonly Dictionary<int, T> _refs = new Dictionary<int, T>();
    private readonly Func<T> _init;

    /// <summary>
    /// Creates a new ThreadSafeValue where the initial value of the struct on each thread is default
    /// </summary>
    public ThreadIsolatedValue() { }

    /// <summary>
    /// Creates a new ThreadSafeValue where the initial value of the struct on each thread is generated by the given initialiser function
    /// </summary>
    /// <param name="init">Initialiser Function</param>
    public ThreadIsolatedValue(Func<T> init)
    {
        _init = init;
    }

    /// <summary>
    /// Gets the initialiser function
    /// </summary>
    public Func<T> Initialiser => _init;

    /// <summary>
    /// Gets/Sets the value for the current thread
    /// </summary>
    public T Value
    {
        get
        {
            try
            {
                Monitor.Enter(_refs);
                var id = Thread.CurrentThread.ManagedThreadId;
                if (!_refs.ContainsKey(id))
                {
                    var value = _init?.Invoke() ?? default(T);
                    _refs.Add(id, value);
                }
                return _refs[id];
            }
            finally
            {
                Monitor.Exit(_refs);
            }
        }
        set
        {
            try
            {
                Monitor.Enter(_refs);
                var id = Thread.CurrentThread.ManagedThreadId;
                _refs[id] = value;
            }
            finally
            {
                Monitor.Exit(_refs);
            }
        }
    }

    /// <summary>
    /// Disposes of the value
    /// </summary>
    public void Dispose()
    {
        try
        {
            Monitor.Enter(_refs);
            _refs.Clear();
        }
        finally
        {
            Monitor.Exit(_refs);
        }
    }
}